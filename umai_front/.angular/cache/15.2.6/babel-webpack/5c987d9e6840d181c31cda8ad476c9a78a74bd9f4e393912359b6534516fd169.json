{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ConnexionComponent = class ConnexionComponent {\n  constructor() {\n    this.showRegister = false;\n    this.showConnexion = true;\n    this.message = \"\";\n    this.class = \"\";\n  }\n  changeToLogin() {\n    this.showRegister = false;\n    this.showConnexion = true;\n  }\n  changeToRegister() {\n    this.showRegister = true;\n    this.showConnexion = false;\n  }\n  postData(methode, url = \"\", data = {}, json = true) {\n    /*const response = await fetch(url, {\r\n      method: methode,\r\n      mode: \"cors\",\r\n      cache: \"no-cache\",\r\n      credentials: \"same-origin\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      redirect: \"follow\",\r\n      referrerPolicy: \"no-referrer\",\r\n      body: JSON.stringify(data),\r\n    });\r\n    if (json) {\r\n      return response.json();\r\n    }\r\n    else {\r\n      return response;\r\n    }*/\n  }\n  sendConnect(data) {\n    this.postData(\"POST\", \"http://localhost:3000/auth/login\", {\n      username: data.username,\n      password: data.password\n    }).then(elem => {\n      var message = document.getElementById(\"message\");\n      if (data.access_token) {\n        message.className = \"messageGood\";\n        message.innerHTML = \"Connexion réussi !\";\n        localStorage.setItem('tokens', JSON.stringify(data));\n        setTimeout(() => {\n          document.location.href = \"./listUser.html\";\n        }, 1000);\n      } else {\n        message.className = \"messageBad\";\n        message.innerHTML = \"Connexion failed !\";\n      }\n    });\n    console.log(data);\n  }\n  inscriptionUser(data) {\n    this.postData(\"POST\", \"http://localhost:3000/users\", {\n      firstname: data.firstname,\n      lastname: data.name,\n      phone: data.phone,\n      email: data.email,\n      password: data.password,\n      type: type\n    }, false).then(elem => {\n      console.log(\"ok\");\n      var message = document.getElementById(\"message2\");\n      if (data.ok) {\n        var button = document.getElementById(\"signupButton\");\n        button.disabled = true;\n        message.className = \"messageGood\";\n        message.innerHTML = \"Inscription réussi !\";\n        setTimeout(() => {\n          document.location.href = \"./login.html\";\n        }, 1000);\n      } else {\n        message.className = \"messageBad\";\n        message.innerHTML = \"Inscription failed !\";\n      }\n    });\n    console.log(data);\n  }\n};\nConnexionComponent = __decorate([Component({\n  selector: 'app-connexion',\n  templateUrl: './connexion.component.html',\n  styleUrls: ['./connexion.component.css']\n})], ConnexionComponent);\nexport { ConnexionComponent };","map":{"version":3,"mappings":"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","names":["Component","ConnexionComponent","constructor","changeToLogin","showRegister","showConnexion","changeToRegister","postData","methode","url","data","json","sendConnect","username","password","then","elem","message","document","getElementById","access_token","className","innerHTML","localStorage","setItem","JSON","stringify","setTimeout","location","href","console","log","inscriptionUser","firstname","lastname","name","phone","email","type","ok","button","disabled","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\umai\\umai_front\\src\\app\\connexion\\connexion.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-connexion',\r\n  templateUrl: './connexion.component.html',\r\n  styleUrls: ['./connexion.component.css']\r\n})\r\nexport class ConnexionComponent {\r\n  public showRegister: boolean = false;\r\n  public showConnexion: boolean = true;\r\n  public message:string = \"\";\r\n  public class:string=\"\";\r\n\r\n  changeToLogin() {\r\n    this.showRegister = false;\r\n    this.showConnexion = true;\r\n  }\r\n\r\n  changeToRegister() {\r\n    this.showRegister = true;\r\n    this.showConnexion = false;\r\n\r\n  }\r\n\r\n  postData(methode: any, url = \"\", data = {}, json = true) {\r\n    /*const response = await fetch(url, {\r\n      method: methode,\r\n      mode: \"cors\",\r\n      cache: \"no-cache\",\r\n      credentials: \"same-origin\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      redirect: \"follow\",\r\n      referrerPolicy: \"no-referrer\",\r\n      body: JSON.stringify(data),\r\n    });\r\n    if (json) {\r\n      return response.json();\r\n    }\r\n    else {\r\n      return response;\r\n    }*/\r\n  }\r\n\r\n  sendConnect(data:any) {\r\n    this.postData(\"POST\", \"http://localhost:3000/auth/login\",\r\n      { username: data.username, password: data.password })\r\n      .then(elem => {\r\n        var message = document.getElementById(\"message\");\r\n        if (data.access_token) {\r\n          message.className = \"messageGood\"\r\n          message.innerHTML = \"Connexion réussi !\"\r\n          localStorage.setItem('tokens', JSON.stringify(data));\r\n          setTimeout(() => {\r\n            document.location.href = \"./listUser.html\";\r\n          }, 1000);\r\n        } else {\r\n          message.className = \"messageBad\"\r\n          message.innerHTML = \"Connexion failed !\"\r\n        }\r\n      });\r\n      console.log(data);\r\n  }\r\n\r\n  inscriptionUser(data:any) {\r\n    this.postData(\"POST\", \"http://localhost:3000/users\",\r\n      { firstname: data.firstname, lastname: data.name, phone: data.phone, email: data.email, password: data.password, type: type }, false)\r\n      .then(elem => {\r\n        console.log(\"ok\");\r\n        var message = document.getElementById(\"message2\")\r\n        if (data.ok) {\r\n          var button = document.getElementById(\"signupButton\");\r\n          button.disabled = true;\r\n          message.className = \"messageGood\"\r\n          message.innerHTML = \"Inscription réussi !\"\r\n          setTimeout(() => {\r\n            document.location.href = \"./login.html\";\r\n          }, 1000);\r\n        } else {\r\n          message.className = \"messageBad\"\r\n          message.innerHTML = \"Inscription failed !\"\r\n        }\r\n      });\r\n      console.log(data);\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}